# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class Solution:
    
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        q = deque()
        if not root1:
            return root2
        if not root2:
            return root1
        
        q.append((root1,root2))
        
        while(q):
            x= q.pop()
            curr1 = x[0]
            curr2= x[1]
            if curr1.left and curr2.left:
                q.append((curr1.left,curr2.left))
            elif not curr1.left:
                curr1.left= curr2.left
            if curr1.right and curr2.right:
                q.append((curr1.right,curr2.right))
            elif not curr1.right:
                curr1.right = curr2.right
            
            curr1.val += curr2.val
        return root1
        
        
